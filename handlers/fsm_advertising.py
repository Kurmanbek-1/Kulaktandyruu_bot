from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from config import bot, Admins
from keyboards import buttons

# =======================================================================================================================

user_id = None


class advertising(StatesGroup):
    info = State()
    submit = State()
    info_tariff_file = State()
    info_photo = State()
    tariff = State()
    social_network = State()
    photo_check = State()
    process_receipt = State()
    send_admin = State()
    submit_admin = State()


async def fsm_start(message: types.Message):
    await advertising.info.set()
    await message.answer("–†–∞—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–µ!")


async def info(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['info'] = message.text
    await advertising.next()
    await message.answer('–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–∫—É?', reply_markup=buttons.fileorphoto)


async def fileorphotoreklama(message: types.Message):
    if message.text == "–•–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª!":
        await advertising.info_tariff_file.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª!")

    elif message.text == '–•–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫—É!':
        await advertising.info_photo.set()
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é/–∫–∞—Ä—Ç–∏–Ω–∫—É!")

    else:
        photo_tariff = open('media/img.png', 'rb')
        await advertising.tariff.set()
        await message.answer_photo(photo=photo_tariff, caption="–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å? ‚¨áÔ∏è",
                                   reply_markup=buttons.cancel_markup)


async def process_tariff_file_load(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    file_id = message.document.file_id
    file_size = message.document.file_size
    file_name = message.document.file_name

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    file = await bot.get_file(file_id)
    file_path = file.file_path

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ
    bytes_io = await bot.download_file(file_path)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ "files"
    file_path_to_save = os.path.join('files', file_name)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ
    with open(file_path_to_save, 'wb') as file_local:
        file_local.write(bytes_io.getvalue())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['tariff_file_path'] = file_path_to_save

    photo_tariff = open('media/img.png', 'rb')
    await advertising.tariff.set()
    await message.answer_photo(photo=photo_tariff, caption="–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å? ‚¨áÔ∏è")


async def info_photo_load(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['info_photo'] = message.photo[-1].file_id

    photo_tariff = open('media/img.png', 'rb')
    await advertising.tariff.set()
    await message.answer_photo(photo=photo_tariff, caption="–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å? ‚¨áÔ∏è")


async def tariff(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tariff'] = message.text
    await advertising.next()
    await message.answer("–ì–¥–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É?")


async def social_network(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['social_network'] = message.text
    photo_requisites = open('media/img_1.png', 'rb')

    await message.answer_photo(photo=photo_requisites,
                               caption='–í–æ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã! üì®')
    await advertising.next()
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–∫—É/—Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞!")


async def process_receipt(message: types.Message, state: FSMContext):
    global user_id
    async with state.proxy() as data:
        data["photo_check"] = message.photo[-1].file_id

    user_id = message.chat.id

    await send_admin_data(user_id, data)

    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!  üôåüèº\n"
                         "–≠—Ç–æ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è, –ø—Ä–æ—à—É –ø–æ–¥–æ–∂–¥–∞—Ç—å! ‚è≥")
    await state.finish()


async def send_admin_data(user_id, data):
    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button_yes = InlineKeyboardButton("–î–∞‚úÖ", callback_data="button_yes")
    button_no = InlineKeyboardButton("–ù–µ—Ç‚ùå", callback_data="button_no")
    inline_keyboard.add(button_yes, button_no)

    for Admin in Admins:
        await bot.send_photo(
            photo=data['photo_check'],
            chat_id=Admin,
            caption=f"–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}", reply_markup=inline_keyboard)

        if 'tariff_file_path' in data:
            with open(data['tariff_file_path'], 'rb') as file:
                await bot.send_document(chat_id=Admin, document=file)

        elif 'info_photo' in data:
            await bot.send_photo(chat_id=Admin, photo=data['info_photo'])


async def answer_yes(message: types.Message):
    global user_id
    await bot.send_message(user_id, text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑. ‚úÖ")

    for Admin in Admins:
        await bot.send_message(chat_id=Admin, text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! ‚úÖ')


async def answer_no(message: types.Message):
    global user_id
    await bot.send_message(user_id,
                           text="–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. ‚ùå")
    for Admin in Admins:
        await bot.send_message(chat_id=Admin, text='–û—Ç–∫–ª–æ–Ω–µ–Ω–æ! ‚ùå')


async def cancel_reg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=None)


# =======================================================================================================================
def register_advertising(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, Text(equals="–û—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(fsm_start, commands=["–ó–∞–∫–∞–∑–∞—Ç—å!", "order"])

    dp.register_message_handler(info, state=advertising.info)
    dp.register_message_handler(fileorphotoreklama, state=advertising.submit)
    dp.register_message_handler(process_tariff_file_load, state=advertising.info_tariff_file,
                                content_types=['document'])
    dp.register_message_handler(info_photo_load, state=advertising.info_photo, content_types=['photo'])
    dp.register_message_handler(tariff, state=advertising.tariff)
    dp.register_message_handler(social_network, state=advertising.social_network)
    dp.register_message_handler(process_receipt, state=advertising.photo_check, content_types=['photo'])
    dp.register_message_handler(send_admin_data, state=advertising.send_admin)

    dp.register_callback_query_handler(answer_yes, lambda call: call.data == "button_yes")
    dp.register_callback_query_handler(answer_no, lambda call: call.data == "button_no")
